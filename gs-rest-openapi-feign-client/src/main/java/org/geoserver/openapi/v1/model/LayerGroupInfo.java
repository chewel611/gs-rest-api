/*
 * GeoServer Catalog Model
 * GeoServer Catalog Model Objects
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.geoserver.openapi.v1.model;

import com.fasterxml.jackson.annotation.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;

/** LayerGroupInfo */
@Data
@Accessors(chain = true)
@NoArgsConstructor
@JsonPropertyOrder({
    LayerGroupInfo.JSON_PROPERTY_NAME,
    LayerGroupInfo.JSON_PROPERTY_TITLE,
    LayerGroupInfo.JSON_PROPERTY_ABSTRACT,
    LayerGroupInfo.JSON_PROPERTY_MODE,
    LayerGroupInfo.JSON_PROPERTY_KEYWORDS,
    LayerGroupInfo.JSON_PROPERTY_WORKSPACE,
    LayerGroupInfo.JSON_PROPERTY_LAYERS,
    LayerGroupInfo.JSON_PROPERTY_STYLES,
    LayerGroupInfo.JSON_PROPERTY_BOUNDS,
    LayerGroupInfo.JSON_PROPERTY_METADATA_LINKS
})
public class LayerGroupInfo {
    /** Gets or Sets mode */
    public enum ModeEnum {
        SINGLE("SINGLE"),

        OPAQUE_CONTAINER("OPAQUE_CONTAINER"),

        NAMED("NAMED"),

        CONTAINER("CONTAINER"),

        EO("EO");

        private final String value;

        ModeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ModeEnum fromValue(String value) {
            for (ModeEnum b : ModeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_TITLE = "title";
    private String title;

    public static final String JSON_PROPERTY_ABSTRACT = "abstractTxt";
    private String abstractTxt;

    public static final String JSON_PROPERTY_MODE = "mode";
    private ModeEnum mode;

    public static final String JSON_PROPERTY_KEYWORDS = "keywords";
    private ResourceResponseKeywords keywords;

    public static final String JSON_PROPERTY_WORKSPACE = "workspace";
    private NamedLink workspace;

    public static final String JSON_PROPERTY_LAYERS = "publishables";
    private PublishedLinkList publishables;

    public static final String JSON_PROPERTY_STYLES = "styles";
    /** 图层组中的样式必须要和子图层数量一致， 因为内部会根据子图层来获取对应位置的样式并发布关联到子图层 */
    private LayerStyles styles;

    public static final String JSON_PROPERTY_BOUNDS = "bounds";
    private EnvelopeResponse bounds;

    public static final String JSON_PROPERTY_METADATA_LINKS = "metadataLinks";
    private MetadataLinks metadataLinks;

    /**
     * Get name
     *
     * @return name
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    /**
     * Get title
     *
     * @return title
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TITLE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getTitle() {
        return title;
    }

    /**
     * Get abstractText
     *
     * @return abstractText
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ABSTRACT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAbstractTxt() {
        return abstractTxt;
    }

    /**
     * Get mode
     *
     * @return mode
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MODE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ModeEnum getMode() {
        return mode;
    }

    /**
     * Get keywords
     *
     * @return keywords
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_KEYWORDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public ResourceResponseKeywords getKeywords() {
        return keywords;
    }

    /**
     * Get workspace
     *
     * @return workspace
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_WORKSPACE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public NamedLink getWorkspace() {
        return workspace;
    }

    /**
     * Get layers
     *
     * @return layers
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_LAYERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public PublishedLinkList getPublishables() {
        return publishables;
    }

    /**
     * Get styles
     *
     * @return styles
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_STYLES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public LayerStyles getStyles() {
        return styles;
    }

    /**
     * Get bounds
     *
     * @return bounds
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_BOUNDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public EnvelopeResponse getBounds() {
        return bounds;
    }

    /**
     * Get metadataLinks
     *
     * @return metadataLinks
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_METADATA_LINKS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public MetadataLinks getMetadataLinks() {
        return metadataLinks;
    }

    public LayerGroupInfo addLayersItem(String layerName) {
        if (this.publishables == null) {
            this.publishables = new PublishedLinkList();
        }
        PublishedLink layer =
                new PublishedLink()
                        .setAtType(PublishedLayerType.LAYER.getValue())
                        .setName(layerName);

        this.publishables.addLayersItem(layer);
        return this;
    }

    public LayerGroupInfo addLayersItem(String layerName, PublishedLayerType type) {
        if (this.publishables == null) {
            this.publishables = new PublishedLinkList();
        }
        PublishedLink layer = new PublishedLink().setAtType(type.getValue()).setName(layerName);

        this.publishables.addLayersItem(layer);
        return this;
    }

    public LayerGroupInfo removeLayersItem(String layerName) {
        if (this.publishables != null) {
            if (!layerName.contains(":")) {
                layerName =
                        this.getWorkspace() != null
                                ? this.getWorkspace().getName() + ":" + layerName
                                : layerName;
            }
            this.publishables.removeLayersItem(layerName);
        }
        return this;
    }

    public LayerGroupInfo addStylesItem(NamedLink stylesItem) {
        if (this.styles == null) {
            this.styles = new LayerStyles();
        }
        this.styles.addStyleItem(stylesItem);
        return this;
    }

    @Getter
    @AllArgsConstructor
    public enum PublishedLayerType {
        /** 图层 */
        LAYER("layer"),
        /** 图层组 */
        LAYER_GROUP("layerGroup");

        /** 值 */
        private final String value;
    }
}
