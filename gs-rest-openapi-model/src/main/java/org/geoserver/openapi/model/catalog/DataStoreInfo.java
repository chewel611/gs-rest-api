/*
 * GeoServer Catalog Model
 * GeoServer Catalog Model Objects
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.geoserver.openapi.model.catalog;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.geoserver.openapi.model.catalog.WorkspaceInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DataStoreInfo
 */
@JsonPropertyOrder({
  DataStoreInfo.JSON_PROPERTY_NAME,
  DataStoreInfo.JSON_PROPERTY_DESCRIPTION,
  DataStoreInfo.JSON_PROPERTY_ENABLED,
  DataStoreInfo.JSON_PROPERTY_CONNECTION_PARAMETERS,
  DataStoreInfo.JSON_PROPERTY_WORKSPACE
})

public class DataStoreInfo {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled = true;

  public static final String JSON_PROPERTY_CONNECTION_PARAMETERS = "connectionParameters";
  private Map<String, String> connectionParameters = null;

  public static final String JSON_PROPERTY_WORKSPACE = "workspace";
  private WorkspaceInfo workspace;


  public DataStoreInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of data store
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of data store")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public DataStoreInfo description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of data store
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of data store")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public DataStoreInfo enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether or not the data store is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the data store is enabled")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public DataStoreInfo connectionParameters(Map<String, String> connectionParameters) {
    
    this.connectionParameters = connectionParameters;
    return this;
  }

  public DataStoreInfo putConnectionParametersItem(String key, String connectionParametersItem) {
    if (this.connectionParameters == null) {
      this.connectionParameters = new HashMap<>();
    }
    this.connectionParameters.put(key, connectionParametersItem);
    return this;
  }

   /**
   * Get connectionParameters
   * @return connectionParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTION_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getConnectionParameters() {
    return connectionParameters;
  }


  public void setConnectionParameters(Map<String, String> connectionParameters) {
    this.connectionParameters = connectionParameters;
  }


  public DataStoreInfo workspace(WorkspaceInfo workspace) {
    
    this.workspace = workspace;
    return this;
  }

   /**
   * Get workspace
   * @return workspace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_WORKSPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WorkspaceInfo getWorkspace() {
    return workspace;
  }


  public void setWorkspace(WorkspaceInfo workspace) {
    this.workspace = workspace;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataStoreInfo dataStoreInfo = (DataStoreInfo) o;
    return Objects.equals(this.name, dataStoreInfo.name) &&
        Objects.equals(this.description, dataStoreInfo.description) &&
        Objects.equals(this.enabled, dataStoreInfo.enabled) &&
        Objects.equals(this.connectionParameters, dataStoreInfo.connectionParameters) &&
        Objects.equals(this.workspace, dataStoreInfo.workspace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, enabled, connectionParameters, workspace);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataStoreInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    connectionParameters: ").append(toIndentedString(connectionParameters)).append("\n");
    sb.append("    workspace: ").append(toIndentedString(workspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

